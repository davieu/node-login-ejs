const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const passport = require('passport');

// User model
const User = require('../models/User')

// Login Page
router.get('/login', (req, res) => res.render('login'));

// Register Page
router.get('/register', (req, res) => res.render('register'));


// Register Handle - SUPER CRAZY SPAGHETTI CODE. I had trouble with matching existing username and email so that no duplicates would be in DB. I tried for hours. Finally I came up with this monstrous code to function the way I wanted it too.
router.post('/register', (req, res) => {
  const { username, firstName, lastName, age, email, password, password2 } = req.body;
  let errors = [];

  // Check required fields
  if (!username || !firstName || !lastName || !age || !email || !password || !password2) {
    errors.push({ msg: 'Please fill in all fields' })
  }

  // Check passwords match
  if (password !== password2) {
    errors.push({ msg: 'Passwords do not match' })
  }

  // Check password length 
  if (password.length < 6) {
    errors.push({ msg: 'Password should be atleast 6 characters' })
  }

  if (errors.length > 0) {
    res.render('register', {
      errors, 
      username,
      firstName,
      lastName,
      age,
      email, 
      password,
      password2
    })
  } else {
    // Validation passes - this giant block will check for duplicate emails and usernames
    User.findOne({ email: email })
      .then(user => {
        if(user) {
          // email exists
          errors.push({ msg: 'Email is already registered' });
          res.render('register', {
            errors, 
            username,
            firstName,
            lastName,
            age,
            email, 
            password,
            password2
          });
        } else {
          let userExists = false;
          User.findOne({ username: username })
            .then(user => {
              if(user) {
                userExists = true;
                if(userExists) {
                  errors.push({ msg: 'Username is already in use' });
                }
                res.render('register', {
                  errors, 
                  username,
                  firstName,
                  lastName,
                  age,
                  email, 
                  password,
                  password2
                });
              } else {
                const newUser = new User({
                  username,
                  firstName,
                  lastName,
                  age,
                  email, 
                  password,
                });
                
                // --------- Hash Password -----------
                //                  callback with err and salt passed in 
                //                  salt generated by genSalt()
                bcrypt.genSalt(10, (err, salt) => 
                  // bcrypt.hash takes in pw and salt and will give a hash back
                                                          // callback/hash pw created
                  bcrypt.hash(newUser.password, salt, (err, hash) => {
                    if (err) throw err;
                    // Set password to hashed
                    newUser.password = hash;
                    // Save user
                    newUser.save()
                      .then(user => {
                        // req.flash is the middleware that we created to create the flash message
                        req.flash('success_msg', 'You are now registered and can log in');
                        // a flash for the email to inject into the login page when new user registers
                        req.flash('email', user.email)
                        res.redirect('/users/login');
                      })
                      .catch(err => console.log(err));
                }))
              }
            }).catch(err => {console.log(err)})
        }
      });
  }
});

// Login Handle
router.post('/login', (req, res, next) => {
  passport.authenticate('local', {
    successRedirect: '/dashboard',
    failureRedirect: '/users/login',
    failureFlash: true
  })(req, res, next);
});

// Logout Handler
router.get('/logout', (req, res) => {
  //logout() is a method from passport middleware
  console.log('teet', req.user)
  req.logout()
  req.flash('success_msg', 'You are logged out')
  res.redirect('/users/login')
})


module.exports = router;